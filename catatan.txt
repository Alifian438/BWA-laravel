link ERD : https://whimsical.com/belajar-bootcamp-UTMi7YRHi5qozfDhNa2Fw
link asset : https://sheer-health-52d.notion.site/TO-DO-Notes-for-ALL-a5aa0a07a54748af85b7da5c045b7072

zoho.com

cari gambar default : pixelhunter


langkah-langkah
1. install laravel 8
2. install jetstream : composer require laravel/jetstream:2.6
3. ketik pada terminal :1. php artisan jetstream:install livewire 
			2. npm install
			3. npm run dev
			4. npm watch
4. buat migration : php artisan make:migration create_namatabel_table
5. contoh program untuk menambahkan kolom pada table : $table->integer('doctor_id');
6. jangan lupa semua table di beri program : $table->softDeletes();
7. setelah membuat migration : php artisan migrate
8. buat foreign key untuk menyambungkan table berdasarkan id : php artisan make:migration add_foreign_keys_to_namaTable_table
9. contoh program untuk foreign key function up :  $table->foreign('user_id', 'fk_namaTableForeignKey_to_TableYangDiTuju')->references('id')->on('namaTableYangDiTuju')->onDelete('cascade')->onUpdate('cascade');
10. contoh program untuk foreign key function down : $table->dropForeign('fk_namaTableForeignKey_to_TableYangDiTuju'); 
11. setelah itu pada table yang di atur foreign key nya tambahkan program ini : $table->foreignId('user_id')->nullable()->index('fk_detail_user_to_users'); 			 
12. setelah ditambahkan foreign keynya jalankan migrate pada terminal : php artisan migrate:refresh
13. bikin model untuk table dengan cara ketik perintah pada terminal : php artisan make:model MasterData/nama table
14. setelah itu pada masing" model tambahkan code : use Illuminate\Database\Eloquent\SoftDeletes;
15. dan ganti use HasFactory dengan use SoftDeletes dan tambahkan code : public $table = 'sesuai nama table';
16. setelah buat data sesuai data pada table databasenya masukan ke $fillable : 
	protected $dates = [
        	'created_at',
         	'updated_at',
         	'deleted_at',
     	];

	protected $fillable = [
         	'name',
         	'price',
         	'created_at',
         	'updated_at',
         	'deleted_at',
     	];

17. setelah itu buat koneksinya antar table seperti one to one, one to many, many to many
	a. one to one

	public function transaction(){
        //2 parameter (path models, field foreign key)
        return $this->hasOne('App\Models\Operational\Transaction', 'appointment_id');
    	}

	public function appointment(){
        // 3 parameter (path model, field foreign key, field primary key dari table hasmany/hasone)
        return $this->belongsTo('App\Models\Operational\Appointment', 'appointment_id', 'id');
    	}

	b. one to many

	public function role_user(){
        //2 parameter (path models, field foreign key)
        return $this->hasMany('App\Models\ManagementAccess\RoleUser', 'role_id');
    	}

	public function role(){
        // 3 parameter (path model, field foreign key, field primary key dari table hasmany/hasone)
        return $this->belongsTo('App\Models\ManagementAccess\Role', 'role_id', 'id');
    	}

18. Membuat seeders untuk data langsung masuk ke db pertama ketik pada terminal php artisan make:seeder nama table seeder
19. setelah itu buka seeder dan ketik program ini pada bagian atas :
	use App\Models\MasterData\ConfigPayment; //tempat models table yang di buat seeder

	use Illuminate\Database\Seeder;
	use Illuminate\Support\Facades\DB;

20. dan jangan lupa comment bagian @return void seperti //@return void
21. setelah itu pada public funtion run ketik program ini :
	$config_payment = [
            [
                'fee' => '150000', //nama kolom pada table
                'vat' => '20', //nama kolom pada table
                'created_at' => date('Y-m-d H:i:s'), //untuk kolom created_at
                'updated_at' => date('Y-m-d H:i:s'), //untuk kolom updated_at
            ], 
        ]; 

        //untuk insert ke table nama models setelah itu bagian belakang nama variabel di atas
        ConfigPayment::insert($config_payment);

22. Setelah selesai semua ketik pada terminal : php artisan migrate:refresh --seed
23. Membuat Request unutuk validas input suatu data, dengan cara mengetik command ini pada terminal untuk store : php artisan make:request namaFolder/StoreConsultationRequest
24. dan untuk update : php artisan make:request namaFolder/UpdateConsultationRequest
25. setelah itu pada file request pada bagian atas tambahkan program ini :
	use App\Models\MasterData\ConfigPayment; //arahkan sesuai file model request
	// use Gate
	use Illuminate\Foundation\Http\FormRequest;
	use Symfony\Component\HttpFoundation\Response;

26. setelah itu pada bagian public funtion authorize() ganti return menjadi true soalnya nanti akan dijadikan midleware
27. setelah itu pada bagian public function rules() isi validasinya seperti program berikut :
	return [
            'fee' => ['required', 'string', 'max:255'],
            'vat' => ['required', 'string', 'max:255'],
        ];
28. jika validasinya ada yang unique tambahkan code program ini untuk bagian store : 'unique:consultation'
29. dan pada bagian update tambahkan program ini pada bagian atas :
	//rule ini hanya untuk update request
	use Illuminate\Validation\Rule;

30. dan di bagian validasinya di tulis seperti ini : Rule::unique('consultation')->ignore($this->consultation),
31. membuat controller dengan cara mengetik command ini pada terminal : php artisan make:controller Frontsite/PaymentController --resource
32. setelah itu pada bagian controller tambahkan code di bagian atas seperti ini : 
	namespace App\Http\Controllers\Frontsite;

	use App\Http\Controllers\Controller;

	use Illuminate\Support\Facades\storage;
	use symfony\Component\HttpFoundation\Response;

	// use Gate;
	// use File; //digunakan untuk import sebuah foto
	use Auth;

	use App\Models\User;
	use App\Models\Operational\Doctor;
	use App\Models\MasterData\Specialist;

	// thirdparty package

33. setelah itu jika page nya membutuhkan validasi harus login user terlebih dahulu bisa tambahkan code seperti di bawah ini di bagian extend controller: 
	/**
     * Instantiate a new controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('auth');
    }

34. setelah itu pada bagian public function index tambahkan code ini : 
	public function index()
    {
        return view('pages.frontsite.landing-page.index'); //view di sini di ambil dari file pada folder yang di arahkan
    }

35. jika ingin memunculkan error bisa tambahkan return seperti di bawah ini : 
	return abort(404);

36. setelah itu pada bagian route web untuk menampilkan index pada web bisa menggunakan code seperti di bawah ini :
	Route::resource('/', LandingController::class);

37. setelah itu kita harus membuat group untuk bagian middlewarenya agar tidak membuat setting middleware per route :
	//untuk frontsite 
	Route::group(['middleware' => ['auth::sanctum', 'verified']], function(){
    //payment pages
    Route::resource('payment', PaymentController::class);
    
    
    //appointment pages
    Route::resource('appointment', AppointmentController::class);
	});

	//untuk backsite
	Route::group(['prefix' => 'backsite', 'as' => 'backsite.', 'middleware' => ['auth::sactum', 'verified']], function(){
		
		return view('dashboard');
	});

38. setelah itu kita masukkan asset website yang sudah ada pada folder public->assets->frontsite
39. setelah itu kita membuat template view dengan cara membagi-bagi layout website dengan cara membuat file masing per layout agar website menjadi lancar, pertama kita akan membuat untuk bagian cssnya yang kita simpan pada folder view terus includes setelah itu frontsite. terus pada file css kita menuliskan code css yang sudah di sediakan oleh website yang sudah jadi :
	<link rel="preconnect" href="{{ url('https://fonts.googleapis.com') }}" />
    <link rel="preconnect" href="{{ url('https://fonts.gstatic.com') }}" crossorigin />
    <link
      href="{{ url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap rel="stylesheet"') }}"/>
	<link rel="stylesheet" href="{{ asset('/assets/frontsite/style.css') }}" />

40. Untuk bagian meta :
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />

41. untuk bagian script :
	<script
      defer
      src="{{ url('https://unpkg.com/alpinejs@3.8.0/dist/cdn.min.js') }}">
	</script>

42. Dan pada folder component kita tambahkan file header dan footer di dalamnya kita tambahkan code header dan footer yang sudah di sediakan.
43. setelah itu pada folder layout kita tambahkan file default untuk default layout pada website yang kita buat dan isinya kita tulis codenya seperti code di bawah ini :
	<!DOCTYPE html>
	<html lang="en">
	<head>
		@include('includes.frontsite.meta')
		
		<title>@yield('title') | MeetDoctor</title>

		@stack('before-style')
		@include('includes.frontsite.style')
		@stack('after-style')
	</head>
	<body>
		@include('components.frontsite.header')
			@yield('content')

			
		@include('components.frontsite.footer')
			
		@stack('before-script')
		@include('includes.frontsite.script')
		@stack('after-script')
	</body>
	</html>

44. setelah itu pada folder pages terus folder frontsite ke landing-page kita tambahkan file index.blade.php dan isi file tersebut dengan content landing page : 
	@extends('layouts.default')

	@section('title', 'Home')

	@section('content')
		HOme
	@endSection

45. menambahkan $table->softDeletes(); pada migration users 
46. membuat logika pada header ketika halaman yang yang di buka sama dengan menu pada navbar maka menu tersebut hover codenya seperti di bawah ini : 
	{{ request()->is('/') ? "after:absolute after:content-[''] after:border-b-2 after:border-[#0D63F5] after:w-8/12 after:-translate-x-1/2 after:bottom-3 after:left-1/2 font-semibold inline-flex items-center px-1 text-lg" : "hover:text-gray-500 inline-flex items-center px-1 pt-1 text-lg font-medium" }}"

47. melakukan pemindahan dan edit halaman data dari frontend di masukkan satu satu ke file yang sudah kita buat kemarin.
48. cara memanggil asset yang kita butuhkan di halaman dengan cara : {{ asset('/assets/frontsite/images/doctor-1.png') }}
49. cara routing pada halaman : {{ route('register') }}
50. slicing halaman login dan register langkah pertama copy atau duplicate terlebih dahulu login dan register blade.php nya setelah itu hapus isi login dan register .blade.phpnya dan diganti dengan template yang sudah di buat.
51. Setelah itu kita buat dulu file templatenya untuk halaman login dan registernya : 
	<!DOCTYPE html>
	<html lang="en">
	<head>
		@include('includes.frontsite.meta')
		
		<title>@yield('title') | MeetDoctor</title>

		@stack('before-style')
		@include('includes.frontsite.style')
		@stack('after-style')
	</head>
	<body>
		
			@yield('content')

		@stack('before-script')
		@include('includes.frontsite.script')
		@stack('after-script')
	</body>
	</html>

52. pada saat slicing halaman login.blade.php kita akan menambahkan program pada bagian form programnya sama kan dengan file login yang kita copy tadi setela itu jangan lupa tambahkan @csrf pada bagian bawah form.
53. setelah itu pada menu input tambahkan : for="email" type="email" id="email" name="email" dan di bagian bawahnya tambahkan value: value="{{ old('email') }}" required autofocus dan khusus untuk password tidak usah di tambahkan value
54. dan di bawah bagian input tambahkan menu error : 
	@if ($errors->has('email'))
        <p class="text-red-500 mb-3 text-sm">{{ $errors->first('email') }}</p>
    @endif

55. san pada menu sign in ganti a dengan button dan hapus hrefnya.
56. dan untuk bagian register hampir sama.
57. setelah itu kita membuat controller untuk dashboard agar halaman dashboard bisa diakses : php artisan make:controller DashboardController --resource
58. dan di bagian DashboardController tambahkan public function __construct() : 
	/**
		* Instantiate a new controller instance.
		*
		* @return void
		*/
		public function __construct()
		{
			$this->middleware('auth');
		}

59. di bagian index return : return view('pages.backsite.dashboard.index');
60. setelah itu di bagian route web tambahkan code seperti di bawah ini di bagian atas :
//backsite
use App\Http\Controllers\Backsite\DashboardController;

61. dan tambahkan code ini di bagian Route::group :
	Route::group(['prefix' => 'backsite', 'as' => 'backsite.', 'middleware' => ['auth:sanctum', 'verified']], function(){
    
		//dashboard
		Route::resource('dashboard', DashboardController::class);
	});

62. dan kalau ingin menambahkan fitur tambahkan di bagian register bisa di tambahkan terlebih dahulu di bagian app->Actions->Fortify->CreateNewUser
63. setelah itu atur dulu di bagian app->Providers->RouteServiceProvider atur di bagian HOME tambahkan /backsite sperti contohnya :
	public const HOME = '/backsite/dashboard';

agar ketika kita melakukan login dan register setelah itu kita submit maka akan di arahkan pada halaman dashboard.

64. setelah itu kita slicing di bagian header untuk mevalidasi siapa yang sudah login apa belum dengan menggunakan @guest dan @auth

65. cara menampilkan nama user yang sudah login :
	{{ Auth::user()->name }}

66. cara membuat fitur logout :
	<a
                href="{{ route('logout') }}"
                onclick="event.preventDefault(); document.getElementById('logout-form').submit();"
                class="block px-4 py-2 text-sm text-[#1E2B4F] hover:bg-gray-100"
                role="menuitem"
                tabindex="-1"
                id="user-menu-item-2"
                >Sign out
                
                <form id="logout-form" action="{{ route('logout') }}" method="POST" style="display-none">@csrf</form>
    </a

67. menambahkan asset untuk backsite di public->assets->backsite semua assetnya di dapatkan dari template cms
68. menambahkan meta, script, dan style untuk backsite pada bagian view->includes->backsite semua codenya di dapatkan dari template cms
69. slicing layouts app.blade.php dan halaman dashboard dan bagian component backsite footer header dan menu, serta merubah header pada frontsite pada bagian menu auth setting menjadi dashboard
